# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'for_test_demo.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from threading import Thread
import concurrent.futures
import threading
import subprocess
from time import sleep
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import *
from PyQt5.QtGui import *

# consoleResult = ''

class Worker(QObject):
    target = ""
    result = ""
    
    def __init__(self, t) -> None:
        super().__init__()
        self.target = t

    finished = pyqtSignal()
    progress = pyqtSignal(int)

    def run(self):
        regScan = subprocess.run(['nmap','-Pn',self.target],capture_output=True,text=True)
        print(regScan.stdout)
        self.result = regScan.stdout
        self.finished.emit()

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.SideMenu = QtWidgets.QFrame(self.centralwidget)
        self.SideMenu.setMaximumSize(QtCore.QSize(200, 16777215))
        self.SideMenu.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.SideMenu.setFrameShadow(QtWidgets.QFrame.Raised)
        self.SideMenu.setObjectName("SideMenu")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.SideMenu)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setSpacing(0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.SideMenuCon = QtWidgets.QFrame(self.SideMenu)
        self.SideMenuCon.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.SideMenuCon.setFrameShadow(QtWidgets.QFrame.Raised)
        self.SideMenuCon.setObjectName("SideMenuCon")
        self.portscanner = QtWidgets.QPushButton(self.SideMenuCon)
        self.portscanner.setGeometry(QtCore.QRect(11, 31, 181, 41))
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.portscanner.setFont(font)
        self.portscanner.setCheckable(False)
        self.portscanner.setAutoDefault(False)
        self.portscanner.setDefault(False)
        self.portscanner.setObjectName("portscanner")
        self.horizontalLayout_2.addWidget(self.SideMenuCon)
        self.horizontalLayout.addWidget(self.SideMenu)
        self.frame_2 = QtWidgets.QFrame(self.centralwidget)
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.stackedWidget = QtWidgets.QStackedWidget(self.frame_2)
        self.stackedWidget.setGeometry(QtCore.QRect(0, 10, 561, 571))
        self.stackedWidget.setObjectName("stackedWidget")
        self.PortScanner = QtWidgets.QWidget()
        self.PortScanner.setObjectName("PortScanner")
        self.frame_4 = QtWidgets.QFrame(self.PortScanner)
        self.frame_4.setGeometry(QtCore.QRect(9, -1, 551, 551))
        self.frame_4.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_4.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_4.setObjectName("frame_4")
        self.tab1_3 = QtWidgets.QTabWidget(self.frame_4)
        self.tab1_3.setGeometry(QtCore.QRect(0, 20, 551, 531))
        self.tab1_3.setObjectName("tab1_3")
        self.individualScanTab = QtWidgets.QWidget()
        self.individualScanTab.setObjectName("individualScanTab")
        self.frame_5 = QtWidgets.QFrame(self.individualScanTab)
        self.frame_5.setGeometry(QtCore.QRect(0, 10, 541, 511))
        self.frame_5.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_5.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_5.setObjectName("frame_5")
        self.ind_targetinput = QtWidgets.QLineEdit(self.frame_5)
        self.ind_targetinput.setGeometry(QtCore.QRect(120, 0, 231, 20))
        self.ind_targetinput.setObjectName("ind_targetinput")
        self.Targetlabel = QtWidgets.QLabel(self.frame_5)
        self.Targetlabel.setGeometry(QtCore.QRect(10, 0, 71, 21))
        self.Targetlabel.setObjectName("Targetlabel")
        self.ind_portinput = QtWidgets.QLineEdit(self.frame_5)
        self.ind_portinput.setGeometry(QtCore.QRect(120, 30, 151, 20))
        self.ind_portinput.setObjectName("ind_portinput")
        self.portlabel = QtWidgets.QLabel(self.frame_5)
        self.portlabel.setGeometry(QtCore.QRect(10, 30, 81, 21))
        self.portlabel.setObjectName("portlabel")
        self.ind_ScanButton = QtWidgets.QPushButton(self.frame_5)
        self.ind_ScanButton.setGeometry(QtCore.QRect(320, 70, 131, 31))
        self.ind_ScanButton.setObjectName("ind_ScanButton")
        self.tolabel_3 = QtWidgets.QLabel(self.frame_5)
        self.tolabel_3.setGeometry(QtCore.QRect(280, 30, 21, 20))
        self.tolabel_3.setMinimumSize(QtCore.QSize(0, 20))
        self.tolabel_3.setMaximumSize(QtCore.QSize(21, 20))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.tolabel_3.setFont(font)
        self.tolabel_3.setObjectName("tolabel_3")
        self.Outputlabel = QtWidgets.QLabel(self.frame_5)
        self.Outputlabel.setGeometry(QtCore.QRect(10, 110, 521, 21))
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(10)
        font.setUnderline(True)
        self.Outputlabel.setFont(font)
        self.Outputlabel.setObjectName("Outputlabel")
        self.frame = QtWidgets.QFrame(self.frame_5)
        self.frame.setGeometry(QtCore.QRect(9, 129, 521, 381))
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.indScanOpArea = QtWidgets.QTextEdit(self.frame)
        self.indScanOpArea.setGeometry(QtCore.QRect(0, 0, 521, 361))
        self.indScanOpArea.setMinimumSize(QtCore.QSize(521, 351))
        self.indScanOpArea.setObjectName("indScanOpArea")
        self.ind_portinput_2 = QtWidgets.QLineEdit(self.frame_5)
        self.ind_portinput_2.setGeometry(QtCore.QRect(300, 30, 151, 20))
        self.ind_portinput_2.setObjectName("ind_portinput_2")
        self.label_2 = QtWidgets.QLabel(self.frame_5)
        self.label_2.setGeometry(QtCore.QRect(10, 70, 101, 21))
        self.label_2.setObjectName("label_2")
        self.tab1_3.addTab(self.individualScanTab, "")
        self.FullScanTab = QtWidgets.QWidget()
        self.FullScanTab.setObjectName("FullScanTab")
        self.tab1_3.addTab(self.FullScanTab, "")
        self.label_7 = QtWidgets.QLabel(self.PortScanner)
        self.label_7.setGeometry(QtCore.QRect(20, 0, 521, 16))
        self.label_7.setObjectName("label_7")
        self.stackedWidget.addWidget(self.PortScanner)
        self.Services = QtWidgets.QWidget()
        self.Services.setObjectName("Services")
        self.stackedWidget.addWidget(self.Services)
        self.ScheduledScan = QtWidgets.QWidget()
        self.ScheduledScan.setObjectName("ScheduledScan")
        self.stackedWidget.addWidget(self.ScheduledScan)
        self.horizontalLayout.addWidget(self.frame_2)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        self.stackedWidget.setCurrentIndex(0)
        self.tab1_3.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.ind_ScanButton.clicked.connect(self.runLongTask)    
        # self.connect(self.ind_ScanButton, SIGNAL("clicked()"),self.thread)
        
    def runLongTask(self):
        target = self.ind_targetinput.text()
        self.thread = QThread()

        self.worker = Worker(target)

        self.worker.moveToThread(self.thread)

        self.thread.started.connect(self.worker.run)
        self.worker.finished.connect(self.thread.quit)
        self.worker.finished.connect(self.worker.deleteLater)
        self.thread.finished.connect(self.thread.deleteLater)

        self.thread.start()

        self.thread.finished.connect(
            lambda: self.indScanOpArea.setText(self.worker.result)
        )

        # self.worker.progress.connect(self.reportProgress)
        # self.out = ""
        # self.consoleLog = "";

    # def operation(self):
    #     target = self.ind_targetinput.text()
    #     regScan = subprocess.run(['nmap','-Pn',target],capture_output=True,text=True)
    #     # indScanOpArea.setText("12123123")
    #     self.consoleLog = regScan.stdout
        
    # def thread(self):            
    #     t1 = Thread(target=self.operation)
    #     t1.start()

    #     while t1.is_alive():
    #         # sleep(1)
    #         pass
        
    #     self.indScanOpArea.setText(self.consoleLog)
    
    # def setOutput(self):
    #     with concurrent.futures.ThreadPoolExecutor() as executor:
    #         future = executor.submit(self.operation)
    #         return_value = future.result()
    #         self.indScanOpArea.setText(return_value)

    #   self.out = regScan.stdout
    #   self.setText(self.out)
    #   self.indScanOpArea.setText(self.out)
    #def setText(self):


    # return regScan.stdout
    
    # def display(self):
    #     indIntPortScanOp = self.operation()
    #     self.indScanOpArea.setText(indIntPortScanOp)
    

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.portscanner.setText(_translate("MainWindow", "PORT SCANNER"))
        self.individualScanTab.setToolTip(_translate("MainWindow", "<html><head/><body><p>axca</p><p><br/></p></body></html>"))
        self.Targetlabel.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:9pt;\">Target :</span></p></body></html>"))
        self.portlabel.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:9pt;\">Port Range :</span></p></body></html>"))
        self.ind_ScanButton.setText(_translate("MainWindow", "Scan"))
        self.tolabel_3.setText(_translate("MainWindow", "to"))
        self.Outputlabel.setText(_translate("MainWindow", "<html><head/><body><p>OUTPUT</p></body></html>"))
        self.label_2.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:9pt;\">Type of Scan :</span></p></body></html>"))
        self.tab1_3.setTabText(self.tab1_3.indexOf(self.individualScanTab), _translate("MainWindow", "Individual Target"))
        self.tab1_3.setTabText(self.tab1_3.indexOf(self.FullScanTab), _translate("MainWindow", "Full Network "))
        self.label_7.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:9pt; font-weight:600;\">Port Scan :</span></p></body></html>"))


# class Worker(QtCore.QObject):
#     logged = QtCore.pyqtSignal(str)
#     statusChanged = QtCore.pyqtSignal(bool)

#     def start(self):
#         threading.Timer(0.2, self._execute, daemon=True).start()

#     def _execute(self):
#         threading.Timer(0.2, self._execute, daemon=True).start()

#         try:
#             # target = self.ind_targetinput.text()
#             regScan = subprocess.run(['nmap','-T4',target],capture_output=True,text=True)
#             print(regScan.stdout)
#             # self.indScanOpArea.setText(regScan.stdout)
#             content = regScan.stdout
#             self.logged.emit(content)
#         except IOError as e:
#             self.statusChanged.emit(False)
#         else:
#             self.statusChanged.emit(True)


# class MainWindow(QtWidgets.QMainWindow, Ui_MainWindow):
#     def __init__(self, parent=None):
#         super().__init__(parent)
#         self.setupUi(self)

#         self.worker = Worker()
#         self.worker.logged.connect(self.log_1.setText)
#         self.worker.statusChanged.connect(self.on_status_changed)
#         self.worker.start()

#     @QtCore.pyqtSlot(bool)
#     def on_status_changed(self, status):
#         text = '<html><head/><body><p><span style=" font-size:18pt;">Status: {}</span></p></body></html>'.format(
#             "On" if status else "Off"
#         )
#         self.StatusL_1.setText(text)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
