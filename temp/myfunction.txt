pyuic5 -x -o pyfilename.py design.ui


import subprocess
from PyQt5 import QtCore, QtGui,QtWidgets
from PyQt5.QtWidgets import QApplication
from PyQt5.QtGui import QIntValidator

       # my functions 

        self.ind_portinput.setText("0")
        self.ind_portinput_2.setText("65535")
        self.indScanOpArea.setReadOnly(True)


        self.ind_portinput.setValidator(QIntValidator())
        self.ind_portinput_2.setValidator(QIntValidator())
        self.portscanner.clicked.connect(lambda: self.stackedWidget.setCurrentWidget(self.PortScanner))
        self.scheduledscan.clicked.connect(lambda: self.stackedWidget.setCurrentWidget(self.ScheduledScan))
        self.services.clicked.connect(lambda: self.stackedWidget.setCurrentWidget(self.Services))
        self.ind_ScanButton.clicked.connect(self.indPortScan)
        self.listServicesRefresh.clicked.connect(self.servicesList)
        # self.ind_ScanButton.setDisabled(True)
    
        


    def indPortScan(self):
        indPortInp1 = int(self.ind_portinput.text())
        indPortInp2 = int(self.ind_portinput_2.text())
        indtargetIp = self.ind_targetinput.text()
        indTypeScan = self.ind_typeOfPortScan.currentIndex()
        QApplication.processEvents()

        def regularScan(target):
            regScan = subprocess.run(['nmap',target],capture_output=True,text=True)
            return regScan.stdout
        def pingScan(target):
            regScan = subprocess.run(['nmap','-sn',target],capture_output=True,text=True)
            return regScan.stdout
        def intenseScan(target):
            regScan = subprocess.run(['nmap','-T4','-A','-v',target],capture_output=True,text=True)
            return regScan.stdout
        def intenseUDPScan(target,port1,port2):
            regScan = subprocess.run(['nmap','-p',port1+'-'+port2,'-sS','-sU','-T4',target],capture_output=True,text=True)
            return regScan.stdout
        def intenseTCPScan(target,port1,port2):
            regScan = subprocess.run(['nmap','-p',port1+'-'+port2,target],capture_output=True,text=True)
            return regScan.stdout
            
        def displayIndPortOp(string):
            self.indScanOpArea.setText(string)

        if indtargetIp=="" or indPortInp1=="" or indPortInp2=="":
            self.indScanOpArea.setText("Enter All Fields")
        else:
            if indTypeScan == 0:
                indRegPortScanOp = regularScan(indtargetIp)
                displayIndPortOp(indRegPortScanOp)

            elif indTypeScan == 1:
                indPingPortScanOp = pingScan(indtargetIp)
                displayIndPortOp(indRegPortScanOp)

            elif indTypeScan == 2:
                indIntPortScanOp = intenseScan(indtargetIp)
                displayIndPortOp(indIntPortScanOp)

            elif indTypeScan == 3:
                indIntUDPPortScanOp = intenseUDPScan(indtargetIp,indPortInp1,indPortInp2)
                displayIndPortOp(indIntUDPPortScanOp)

            elif indTypeScan == 4:
                indIntTCPPortScanOp = intenseTCPScan(indtargetIp,indPortInp1,indPortInp2)
                displayIndPortOp(indIntTCPPortScanOp)

def servicesList(self):
        processIdarr = []
        processNamearr = []
        processStatusarr = []
        for process in psutil.process_iter ():
            ProcessId = str(process.pid)
            processIdarr.append(ProcessId)
            # print(ProcessId)
            Name = process.name()
            processNamearr.append(Name)
            Status = process.status()  
            processStatusarr.append(Status)


        serviceList = []
        for i in range(len(processStatusarr)):
            eachEle = {"pId":processIdarr[i],"pName":processNamearr[i],"pStatus":processStatusarr[i]}
            serviceList.append(eachEle)
            i=i+1
        print(serviceList)
        # >> [{'pId': '0', 'pName': 'System Idle Process', 'pStatus': 'running'}, {'pId': '36520', 'pName': 'QcShm.exe', 'pStatus': 'running'}]
        row=0
        self.tableWidget.setRowCount(len(serviceList))
        for service in serviceList: 
            self.tableWidget.setItem(row , 0, QtWidgets.QTableWidgetItem(service["pId"]))
            self.tableWidget.setItem(row , 1, QtWidgets.QTableWidgetItem(service["pName"]))
            self.tableWidget.setItem(row , 2, QtWidgets.QTableWidgetItem(service["pStatus"]))
            row=row+1

def servicesEditList(self):
        processIdarr = []
        processNamearr = []
        processUsernamearr = []
        for process in psutil.process_iter ():
            ProcessId = str(process.pid)
            processIdarr.append(ProcessId)
            # print(ProcessId)
            Name = process.name()
            processNamearr.append(Name)
            Username = process.username()  
            processUsernamearr.append(Username)


        serviceList = []
        for i in range(len(processUsernamearr)):
            eachEle = {"pId":processIdarr[i],"pName":processNamearr[i],"pUsername":processUsernamearr[i]}
            serviceList.append(eachEle)
            i=i+1
        print(serviceList)
        # >> [{'pId': '0', 'pName': 'System Idle Process', 'pStatus': 'running'}, {'pId': '36520', 'pName': 'QcShm.exe', 'pStatus': 'running'}]
        row=0
        self.editServicesTab.setRowCount(len(serviceList))
        for service in serviceList: 
            self.editServicesTab.setItem(row , 1, QtWidgets.QTableWidgetItem(service["pId"]))
            self.editServicesTab.setItem(row , 2, QtWidgets.QTableWidgetItem(service["pName"]))
            self.editServicesTab.setItem(row , 3, QtWidgets.QTableWidgetItem(service["pUsername"]))
            # self.editServicesTab.setItems()
            row=row+1