pyuic5 -x -o pyfilename.py design.ui


import subprocess, psutil
from PyQt5 import QtCore, QtGui, QtWidgets
import subprocess
from PyQt5.QtWidgets import QAbstractItemView
from PyQt5.QtGui import QIntValidator
import nmap

       # my functions 

        self.ind_portinput.setText("0")
        self.ind_portinput_2.setText("65535")
        self.indScanOpArea.setReadOnly(True)


        self.ind_portinput.setValidator(QIntValidator())
        self.ind_portinput_2.setValidator(QIntValidator())
        self.portscanner.clicked.connect(lambda: self.stackedWidget.setCurrentWidget(self.PortScanner))
        self.scheduledscan.clicked.connect(lambda: self.stackedWidget.setCurrentWidget(self.ScheduledScan))
        self.services.clicked.connect(lambda: self.stackedWidget.setCurrentWidget(self.Services))
        self.ind_ScanButton.clicked.connect(self.indPortScan)
        self.full_ScanButton.clicked.connect(self.fullPortScan)
        self.listServicesRefresh.clicked.connect(self.servicesList)
        self.ind_typeOfPortScan.currentIndexChanged.connect(self.changePortVisibility)
        self.fullScanOpTable.setEditTriggers(QAbstractItemView.NoEditTriggers)
        self.listServicesTab.setEditTriggers(QAbstractItemView.NoEditTriggers)

    def changePortVisibility(self):
        if self.ind_typeOfPortScan.currentIndex()==0:
            self.ind_portinput.setText("1")
            self.ind_portinput_2.setText("1024")
            self.ind_portinput.setDisabled(True)
            self.ind_portinput_2.setDisabled(True)
        elif self.ind_typeOfPortScan.currentIndex()==1:
            self.ind_portinput.setDisabled(True)
            self.ind_portinput_2.setDisabled(True)
        elif self.ind_typeOfPortScan.currentIndex()==2:
            self.ind_portinput.setDisabled(True)
            self.ind_portinput_2.setDisabled(True)
        elif self.ind_typeOfPortScan.currentIndex()==3:
            self.ind_portinput.setText("0")
            self.ind_portinput_2.setText("65535")
            self.ind_portinput.setDisabled(False)
            self.ind_portinput_2.setDisabled(False)
        elif self.ind_typeOfPortScan.currentIndex()==4:
            self.ind_portinput.setText("0")
            self.ind_portinput_2.setText("65535")
            self.ind_portinput.setDisabled(False)
            self.ind_portinput_2.setDisabled(False)
        else :
            self.ind_portinput.setDisabled(False)
            self.ind_portinput_2.setDisabled(False)
            
    def fullPortScan(self):
        nm = nmap.PortScanner()
        fullTargetInp = self.full_targetinput_1.text()
        # def getPorts(x):
        #     keys = []
        #     getPorts = nm.scan(x, '1-5024')
        #     dictionary = getPorts['scan'][x]['tcp']
        #     for key in dictionary.items():
        #         keys.append(key)
        #     return keys
        subnetMaskLen = self.full_subnetLen.text()
        nm.scan(hosts=fullTargetInp+"/"+subnetMaskLen, arguments='-sn')
        hosts_list = [{"ip_addr":x,"status":nm[x]['status']['state']} for x in nm.all_hosts()]
        print(hosts_list)
        self.fullScanOpTable.setRowCount(len(hosts_list))
        row = 0
        for host in hosts_list:
            self.fullScanOpTable.setItem(row,0,QtWidgets.QTableWidgetItem(host["ip_addr"]))
            self.fullScanOpTable.setItem(row,1,QtWidgets.QTableWidgetItem(host["status"]))
            row = row+1
    
    def indPortScan(self):
        indPortInp1 = int(self.ind_portinput.text())
        indPortInp2 = int(self.ind_portinput_2.text())
        indtargetIp = self.ind_targetinput.text()
        indTypeScan = self.ind_typeOfPortScan.currentIndex()

        # t = threading.Thread(target=self.intenseScan)
        # QApplication.processEvents()

        def regularScan(target):
            regScan = subprocess.run(['nmap',target],capture_output=True,text=True)
            return regScan.stdout
        def pingScan(target):
            regScan = subprocess.run(['nmap','-sn',target],capture_output=True,text=True)
            return regScan.stdout
        def intenseScan(target):
            regScan = subprocess.run(['nmap','-T4','-A','-v',target],capture_output=True,text=True)
            return regScan.stdout
        def intenseUDPScan(target,port1,port2):
            regScan = subprocess.run(['nmap','-p',port1+'-'+port2,'-sS','-sU','-T4',target],capture_output=True,text=True)
            return regScan.stdout
        def intenseTCPScan(target,port1,port2):
            regScan = subprocess.run(['nmap','-p',port1+'-'+port2,target],capture_output=True,text=True)
            return regScan.stdout
            
        def displayIndPortOp(string):
            self.indScanOpArea.setText(string)

        if indtargetIp=="" or indPortInp1=="" or indPortInp2=="":
            self.indScanOpArea.setText("Enter All Fields")
        else:
            if indTypeScan == 0:
                indRegPortScanOp = regularScan(indtargetIp)
                displayIndPortOp(indRegPortScanOp)

            elif indTypeScan == 1:
                indPingPortScanOp = pingScan(indtargetIp)
                displayIndPortOp(indRegPortScanOp)

            elif indTypeScan == 2:
                indIntPortScanOp = intenseScan(indtargetIp)
                displayIndPortOp(indIntPortScanOp)

            elif indTypeScan == 3:
                indIntUDPPortScanOp = intenseUDPScan(indtargetIp,indPortInp1,indPortInp2)
                displayIndPortOp(indIntUDPPortScanOp)

            elif indTypeScan == 4:
                indIntTCPPortScanOp = intenseTCPScan(indtargetIp,indPortInp1,indPortInp2)
                displayIndPortOp(indIntTCPPortScanOp)

        
    def servicesList(self):
        processIdarr = []
        processNamearr = []
        processStatusarr = []
        for process in psutil.process_iter ():
            ProcessId = str(process.pid)
            processIdarr.append(ProcessId)
            # print(ProcessId)
            Name = process.name()
            processNamearr.append(Name)
            Status = process.status()  
            processStatusarr.append(Status)


        serviceList = []
        for i in range(len(processStatusarr)):
            eachEle = {"pId":processIdarr[i],"pName":processNamearr[i],"pStatus":processStatusarr[i]}
            serviceList.append(eachEle)
            i=i+1
        print(serviceList)
        # >> [{'pId': '0', 'pName': 'System Idle Process', 'pStatus': 'running'}, {'pId': '36520', 'pName': 'QcShm.exe', 'pStatus': 'running'}]
        row=0
        self.listServicesTab.setRowCount(len(serviceList))
        for service in serviceList: 
            self.listServicesTab.setItem(row , 0, QtWidgets.QTableWidgetItem(service["pId"]))
            self.listServicesTab.setItem(row , 1, QtWidgets.QTableWidgetItem(service["pName"]))
            self.listServicesTab.setItem(row , 2, QtWidgets.QTableWidgetItem(service["pStatus"]))
            row=row+1
